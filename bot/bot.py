import os
import time
import asyncio
import hashlib
from datetime import date, timedelta
from pathlib import Path
from typing import Optional, List

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, BufferedInputFile
)
import httpx

# --- env ---
load_dotenv()  # —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
bot_dir_env = Path(__file__).resolve().parent / ".env"
if bot_dir_env.exists():
    load_dotenv(dotenv_path=bot_dir_env)

# --- settings ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

REDIRECT_BASE = os.getenv("REDIRECT_BASE", "http://127.0.0.1:8000").rstrip("/")
STATS_BASE = os.getenv("STATS_BASE", REDIRECT_BASE).rstrip("/")
USER_HASH_SALT = os.getenv("USER_HASH_SALT", "change_me_salt")

# ====== —É—Ç–∏–ª–∏—Ç—ã ======

def _parse_admin_ids(val: Optional[str]) -> List[int]:
    if not val:
        return []
    ids = []
    for part in val.split(","):
        part = part.strip()
        if part.isdigit():
            ids.append(int(part))
    return ids

ADMIN_IDS = set(_parse_admin_ids(os.getenv("ADMIN_IDS", "")))

# –∞–Ω—Ç–∏—Ñ–ª—É–¥
BOT_RATE_WINDOW_SEC = float(os.getenv("BOT_RATE_WINDOW_SEC", "0.5"))

# —Ñ–∞–π–ª—ã
BASE_DIR = Path(__file__).resolve().parent
BANNER_LOCAL_PATH = BASE_DIR / "banner.png"   # –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º
BANNER_URL = None                              # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å URL –±–∞–Ω–Ω–µ—Ä–∞

WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞–π–º–∞–º.\n\n"
    "üìç –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã.\n"
    "‚ö° –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç–∞—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤."
)

COUNTRIES = [
    ("RU", "üá∑üá∫ –†–æ—Å—Å–∏—è"),
    ("KZ", "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"),
]

# –∫–∞—Ç–∞–ª–æ–≥ –æ—Ñ—Ñ–µ—Ä–æ–≤: slug, title (–æ—Å–Ω–æ–≤–Ω—ã–µ)
OFFERS = [
    ("boostra",         "üöÄ BOOSTRA"),
    ("privet-sosed",    "üè† –ü—Ä–∏–≤–µ—Ç, —Å–æ—Å–µ–¥!"),
    ("one-click-money", "‚ö° One Click Money"),
    ("vivus",           "üíö Vivus"),
    ("podbor-0",        "üéØ –ü–æ–¥–±–æ—Ä –∑–∞–π–º–∞ –±–µ–∑ %"),
]

# –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (—á–µ—Ä–µ–∑ /r/ ‚Üí —Å—á–∏—Ç–∞–µ–º –∫–ª–∏–∫–∏)
EXTRA_OFFERS = [
    ("calc-potential", "üìà –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"),  # https://clck.ru/3NbeMg
    ("best-terms",     "‚≠ê –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è"),  # https://clck.ru/3NbeU8
]

# ====== –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–Ω—Ç–∏—Ñ–ª—É–¥ –∏ –ø–∞–º—è—Ç—å –≤—ã–±–æ—Ä–∞ ======
_last_action_ts: dict[int, float] = {}
_user_country: dict[int, str] = {}

def allowed(user_id: int) -> bool:
    now = time.monotonic()
    prev = _last_action_ts.get(user_id, 0.0)
    if now - prev < BOT_RATE_WINDOW_SEC:
        return False
    _last_action_ts[user_id] = now
    return True

def uid_hash(telegram_user_id: int) -> str:
    # sha256(str(user_id) + ':' + salt)
    raw = f"{telegram_user_id}:{USER_HASH_SALT}".encode("utf-8")
    return hashlib.sha256(raw).hexdigest()

def build_redirect(slug: str, country: str, uid_h: str) -> str:
    return f"{REDIRECT_BASE}/r/{slug}?c={country}&u={uid_h}"

# ====== –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======

def kb_countries() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=title, callback_data=f"country:{code}")]
            for code, title in COUNTRIES]
    return InlineKeyboardMarkup(inline_keyboard=rows)

async def kb_offers(country: str, user_id: int) -> InlineKeyboardMarkup:
    uid_h = uid_hash(user_id)
    pairs = OFFERS + EXTRA_OFFERS
    slugs = [s for s, _ in pairs]

    async with httpx.AsyncClient(timeout=10.0) as client:
        async def make(slug: str):
            try:
                r = await client.post(
                    f"{STATS_BASE}/s/new",
                    json={"slug": slug, "c": country, "u": uid_h},
                )
                r.raise_for_status()
                path = r.json().get("path")
                return slug, (f"{REDIRECT_BASE}{path}" if path else None)
            except Exception as e:
                print("short link error:", slug, e)
                return slug, None

        short_pairs = await asyncio.gather(*(make(slug) for slug in slugs))

    short = dict(short_pairs)
    rows = []
    for slug, title in pairs:
        url = short.get(slug) or build_redirect(slug, country, uid_h)
        rows.append([InlineKeyboardButton(text=title, url=url)])

    rows.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:countries")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ====== —Ö—ç–Ω–¥–ª–µ—Ä—ã ======
async def cmd_start(message: Message):
    if not allowed(message.from_user.id):
        return

    markup = kb_countries()
    sent = False

    # 1) –±–∞–Ω–Ω–µ—Ä –∏–∑ —Ñ–∞–π–ª–∞
    try:
        if BANNER_LOCAL_PATH.exists():
            photo = FSInputFile(str(BANNER_LOCAL_PATH))
            await message.answer_photo(photo=photo, caption=WELCOME_TEXT, reply_markup=markup)
            sent = True
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞:", e)

    # 2) –±–∞–Ω–Ω–µ—Ä –ø–æ URL
    if not sent and BANNER_URL:
        try:
            await message.answer_photo(photo=BANNER_URL, caption=WELCOME_TEXT, reply_markup=markup)
            sent = True
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞ –ø–æ URL:", e)

    # 3) —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    if not sent:
        await message.answer(WELCOME_TEXT, reply_markup=markup)

async def on_country(cb: CallbackQuery):
    if not allowed(cb.from_user.id):
        await cb.answer()
        return

    code = cb.data.split(":", 1)[1]
    _user_country[cb.from_user.id] = code

    markup = await kb_offers(code, cb.from_user.id)
    text = f"–°—Ç—Ä–∞–Ω–∞: {dict(COUNTRIES)[code]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä:"

    try:
        if cb.message.photo:
            await cb.message.edit_caption(text, reply_markup=markup)
        else:
            await cb.message.edit_text(text, reply_markup=markup)
    except Exception:
        await cb.message.answer(text, reply_markup=markup)

    await cb.answer("–ì–æ—Ç–æ–≤–æ")

async def on_back(cb: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã."""
    if not allowed(cb.from_user.id):
        await cb.answer()
        return
    markup = kb_countries()
    try:
        if cb.message.photo:
            await cb.message.edit_caption(WELCOME_TEXT, reply_markup=markup)
        else:
            await cb.message.edit_text(WELCOME_TEXT, reply_markup=markup)
    except Exception:
        await cb.message.answer(WELCOME_TEXT, reply_markup=markup)
    await cb.answer("–ù–∞–∑–∞–¥")

# --- –∞–¥–º–∏–Ω ---

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS if ADMIN_IDS else False

async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    rows = [
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å",   callback_data="stats:1"),
            InlineKeyboardButton(text="7 –¥–Ω–µ–π",   callback_data="stats:7"),
            InlineKeyboardButton(text="30 –¥–Ω–µ–π",  callback_data="stats:30"),
            InlineKeyboardButton(text="–í—Å—ë –≤—Ä–µ–º—è",callback_data="stats:all"),
        ]
    ]
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))

async def on_stats(cb: CallbackQuery):
    if not is_admin(cb.from_user.id):
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    key = cb.data.split(":", 1)[1]  # '1' | '7' | '30' | 'all'
    today = date.today()

    if key == "1":
        frm, to = today, today
        title = "–ó–∞ 1 –¥–µ–Ω—å"
    elif key == "7":
        frm, to = today - timedelta(days=6), today
        title = "–ó–∞ 7 –¥–Ω–µ–π"
    elif key == "30":
        frm, to = today - timedelta(days=29), today
        title = "–ó–∞ 30 –¥–Ω–µ–π"
    else:
        frm, to = date(2000, 1, 1), today
        title = "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"

    url = f"{STATS_BASE}/stats/plot?from_date={frm.isoformat()}&to_date={to.isoformat()}&top=10"

    await cb.answer("–°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É‚Ä¶")
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            r = await client.get(url)
            r.raise_for_status()
            img_bytes = r.content
    except Exception as e:
        return await cb.message.answer(f"–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

    png = BufferedInputFile(img_bytes, filename="stats.png")
    caption = f"{title}\n{frm.isoformat()} ‚Äî {to.isoformat()}"
    await cb.message.answer_photo(photo=png, caption=caption)

# ====== –∑–∞–ø—É—Å–∫ ======
async def main() -> None:
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    dp.message.register(cmd_start, CommandStart())
    dp.callback_query.register(on_country, F.data.startswith("country:"))
    dp.callback_query.register(on_back, F.data == "back:countries")

    dp.message.register(cmd_admin, Command("admin"))
    dp.callback_query.register(on_stats, F.data.startswith("stats:"))

    print("Bot started. –ö–æ–º–∞–Ω–¥—ã: /start, /admin (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
